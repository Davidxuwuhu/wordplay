import TokenType from '@nodes/TokenType';

const TokenCategoryDelimiter = 'delimiter';
const TokenCategoryRelation = 'relation';
const TokenCategoryShare = 'share';
const TokenCategoryEvaluation = 'eval';
const TokenCategoryDocs = 'docs';
const TokenCategoryLiteral = 'literal';
const TokenCategoryName = 'name';
const TokenCategoryType = 'type';
const TokenCategoryOperator = 'operator';
const TokenCategoryUnknown = 'unknown';
const TokenCategoryPlaceholder = 'placeholder';
const TokenCategoryEnd = 'end';

const TokenCategories: Map<TokenType, string> = new Map();
TokenCategories.set(TokenType.EvalOpen, TokenCategoryDelimiter);
TokenCategories.set(TokenType.EvalClose, TokenCategoryDelimiter);
TokenCategories.set(TokenType.SetOpen, TokenCategoryDelimiter);
TokenCategories.set(TokenType.SetClose, TokenCategoryDelimiter);
TokenCategories.set(TokenType.ListOpen, TokenCategoryDelimiter);
TokenCategories.set(TokenType.ListClose, TokenCategoryDelimiter);
TokenCategories.set(TokenType.TableOpen, TokenCategoryDelimiter);
TokenCategories.set(TokenType.TableClose, TokenCategoryDelimiter);
TokenCategories.set(TokenType.TypeOpen, TokenCategoryDelimiter);
TokenCategories.set(TokenType.TypeClose, TokenCategoryDelimiter);
TokenCategories.set(TokenType.Bind, TokenCategoryRelation);
TokenCategories.set(TokenType.Access, TokenCategoryRelation);
TokenCategories.set(TokenType.Function, TokenCategoryEvaluation);
TokenCategories.set(TokenType.Borrow, TokenCategoryShare);
TokenCategories.set(TokenType.Share, TokenCategoryShare);
TokenCategories.set(TokenType.Convert, TokenCategoryEvaluation);
TokenCategories.set(TokenType.Doc, TokenCategoryDocs);
TokenCategories.set(TokenType.Words, TokenCategoryDocs);
TokenCategories.set(TokenType.None, TokenCategoryLiteral);
TokenCategories.set(TokenType.Type, TokenCategoryRelation);
TokenCategories.set(TokenType.Separator, TokenCategoryDelimiter);
TokenCategories.set(TokenType.Language, TokenCategoryDelimiter);
TokenCategories.set(TokenType.BooleanType, TokenCategoryLiteral);
TokenCategories.set(TokenType.NumberType, TokenCategoryType);
TokenCategories.set(TokenType.JapaneseNumeral, TokenCategoryLiteral);
TokenCategories.set(TokenType.RomanNumeral, TokenCategoryLiteral);
TokenCategories.set(TokenType.Pi, TokenCategoryLiteral);
TokenCategories.set(TokenType.Infinity, TokenCategoryLiteral);
TokenCategories.set(TokenType.NoneType, TokenCategoryType);
TokenCategories.set(TokenType.Select, TokenCategoryOperator);
TokenCategories.set(TokenType.Insert, TokenCategoryOperator);
TokenCategories.set(TokenType.Update, TokenCategoryOperator);
TokenCategories.set(TokenType.Delete, TokenCategoryOperator);
TokenCategories.set(TokenType.Union, TokenCategoryOperator);
TokenCategories.set(TokenType.Change, TokenCategoryOperator);
TokenCategories.set(TokenType.Previous, TokenCategoryOperator);
TokenCategories.set(TokenType.Change, TokenCategoryOperator);
TokenCategories.set(TokenType.Placeholder, TokenCategoryPlaceholder);
TokenCategories.set(TokenType.Operator, TokenCategoryOperator);
TokenCategories.set(TokenType.Conditional, TokenCategoryOperator);
TokenCategories.set(TokenType.Text, TokenCategoryLiteral);
TokenCategories.set(TokenType.TemplateOpen, TokenCategoryLiteral);
TokenCategories.set(TokenType.TemplateBetween, TokenCategoryLiteral);
TokenCategories.set(TokenType.TemplateClose, TokenCategoryLiteral);
TokenCategories.set(TokenType.Number, TokenCategoryLiteral);
TokenCategories.set(TokenType.Decimal, TokenCategoryLiteral);
TokenCategories.set(TokenType.Base, TokenCategoryLiteral);
TokenCategories.set(TokenType.Boolean, TokenCategoryLiteral);
TokenCategories.set(TokenType.Name, TokenCategoryName);
TokenCategories.set(TokenType.End, TokenCategoryEnd);
TokenCategories.set(TokenType.Unknown, TokenCategoryUnknown);

export default TokenCategories;
