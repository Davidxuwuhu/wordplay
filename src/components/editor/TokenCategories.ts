import Symbol from '@nodes/Symbol';

const TokenCategoryDelimiter = 'delimiter';
const TokenCategoryRelation = 'relation';
const TokenCategoryShare = 'share';
const TokenCategoryEvaluation = 'eval';
const TokenCategoryDocs = 'docs';
const TokenCategoryLiteral = 'literal';
const TokenCategoryName = 'name';
const TokenCategoryType = 'type';
const TokenCategoryOperator = 'operator';
const TokenCategoryUnknown = 'unknown';
const TokenCategoryPlaceholder = 'placeholder';
const TokenCategoryEnd = 'end';

const TokenCategories: Map<Symbol, string> = new Map();
TokenCategories.set(Symbol.EvalOpen, TokenCategoryDelimiter);
TokenCategories.set(Symbol.EvalClose, TokenCategoryDelimiter);
TokenCategories.set(Symbol.SetOpen, TokenCategoryDelimiter);
TokenCategories.set(Symbol.SetClose, TokenCategoryDelimiter);
TokenCategories.set(Symbol.ListOpen, TokenCategoryDelimiter);
TokenCategories.set(Symbol.ListClose, TokenCategoryDelimiter);
TokenCategories.set(Symbol.TableOpen, TokenCategoryDelimiter);
TokenCategories.set(Symbol.TableClose, TokenCategoryDelimiter);
TokenCategories.set(Symbol.TypeOpen, TokenCategoryDelimiter);
TokenCategories.set(Symbol.TypeClose, TokenCategoryDelimiter);
TokenCategories.set(Symbol.Bind, TokenCategoryRelation);
TokenCategories.set(Symbol.Access, TokenCategoryRelation);
TokenCategories.set(Symbol.Function, TokenCategoryEvaluation);
TokenCategories.set(Symbol.Borrow, TokenCategoryShare);
TokenCategories.set(Symbol.Share, TokenCategoryShare);
TokenCategories.set(Symbol.Convert, TokenCategoryEvaluation);
TokenCategories.set(Symbol.Doc, TokenCategoryDocs);
TokenCategories.set(Symbol.Words, TokenCategoryDocs);
TokenCategories.set(Symbol.None, TokenCategoryLiteral);
TokenCategories.set(Symbol.Type, TokenCategoryRelation);
TokenCategories.set(Symbol.Separator, TokenCategoryDelimiter);
TokenCategories.set(Symbol.Language, TokenCategoryDelimiter);
TokenCategories.set(Symbol.BooleanType, TokenCategoryLiteral);
TokenCategories.set(Symbol.NumberType, TokenCategoryType);
TokenCategories.set(Symbol.JapaneseNumeral, TokenCategoryLiteral);
TokenCategories.set(Symbol.RomanNumeral, TokenCategoryLiteral);
TokenCategories.set(Symbol.Pi, TokenCategoryLiteral);
TokenCategories.set(Symbol.Infinity, TokenCategoryLiteral);
TokenCategories.set(Symbol.Select, TokenCategoryOperator);
TokenCategories.set(Symbol.Insert, TokenCategoryOperator);
TokenCategories.set(Symbol.Update, TokenCategoryOperator);
TokenCategories.set(Symbol.Delete, TokenCategoryOperator);
TokenCategories.set(Symbol.Union, TokenCategoryOperator);
TokenCategories.set(Symbol.Change, TokenCategoryOperator);
TokenCategories.set(Symbol.Previous, TokenCategoryOperator);
TokenCategories.set(Symbol.Change, TokenCategoryOperator);
TokenCategories.set(Symbol.Placeholder, TokenCategoryPlaceholder);
TokenCategories.set(Symbol.Operator, TokenCategoryOperator);
TokenCategories.set(Symbol.Conditional, TokenCategoryOperator);
TokenCategories.set(Symbol.Text, TokenCategoryLiteral);
TokenCategories.set(Symbol.Code, TokenCategoryDocs);
TokenCategories.set(Symbol.Number, TokenCategoryLiteral);
TokenCategories.set(Symbol.Decimal, TokenCategoryLiteral);
TokenCategories.set(Symbol.Base, TokenCategoryLiteral);
TokenCategories.set(Symbol.Boolean, TokenCategoryLiteral);
TokenCategories.set(Symbol.Name, TokenCategoryName);
TokenCategories.set(Symbol.End, TokenCategoryEnd);
TokenCategories.set(Symbol.Unknown, TokenCategoryUnknown);

export default TokenCategories;
